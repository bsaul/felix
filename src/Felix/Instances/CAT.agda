{-# OPTIONS --safe --without-K #-}

open import Level

module Felix.Instances.CAT {o ‚Ñì : Level} where

-- I'd move o & l into Obj, but then I'd have to work with Setœâ, and Category
-- etc can only handle Set ‚Ñì (for finite ‚Ñì).

open import Data.Product using (_,_)

open import Felix.Object
open import Felix.Raw
open import Felix.Equiv
private module F {‚Ñì} where open import Felix.Instances.Function ‚Ñì public
open F


record CAT : Set (suc (o ‚äî ‚Ñì)) where
  constructor cat
  field
    {obj} : Set o
    mor : obj ‚Üí obj ‚Üí Set ‚Ñì

infix 0 _‚§á_
record _‚§á_ (ùíú‚ÇÅ ùíú‚ÇÇ : CAT) : Set (o ‚äî ‚Ñì) where
  constructor mk‚§á
  open CAT ùíú‚ÇÅ renaming (obj to obj‚ÇÅ; mor to _‚á®‚ÇÅ_)
  open CAT ùíú‚ÇÇ renaming (obj to obj‚ÇÇ; mor to _‚á®‚ÇÇ_)
  field
    F‚Çí : obj‚ÇÅ ‚Üí obj‚ÇÇ
    F‚Çò : ‚àÄ {a b : obj‚ÇÅ} ‚Üí (a ‚á®‚ÇÅ b) ‚Üí (F‚Çí a ‚á®‚ÇÇ F‚Çí b)

module CAT-instances where instance

  category : Category _‚§á_
  category = record
    { id = mk‚§á id id
    ; _‚àò_ = Œª (mk‚§á G‚Çí G‚Çò) (mk‚§á F‚Çí F‚Çò) ‚Üí mk‚§á (G‚Çí ‚àò F‚Çí) (G‚Çò ‚àò F‚Çò)
    }

  products : Products CAT
  products = record
    { ‚ä§ = cat {‚ä§} Œª { tt tt ‚Üí ‚ä§ }
    ; _√ó_ = Œª (cat {obj‚ÇÅ} _‚á®‚ÇÅ_) (cat {obj‚ÇÇ} _‚á®‚ÇÇ_) ‚Üí
        cat {obj‚ÇÅ √ó obj‚ÇÇ} Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí (a‚ÇÅ ‚á®‚ÇÅ b‚ÇÅ) √ó (a‚ÇÇ ‚á®‚ÇÇ b‚ÇÇ)
    }

  cartesian : Cartesian _‚§á_
  cartesian = record
    { ! = mk‚§á ! !
    ; _‚ñµ_ = Œª (mk‚§á F‚Çí F‚Çò) (mk‚§á G‚Çí G‚Çò) ‚Üí mk‚§á (F‚Çí ‚ñµ G‚Çí) (F‚Çò ‚ñµ G‚Çò)
    ; exl = mk‚§á exl exl
    ; exr = mk‚§á exr exr
    }


-- Temporary (I think) bridge to Homomorphism etc

private variable A B : CAT

open import Felix.Homomorphism

open CAT
open _‚§á_

toH‚Çí : (A ‚§á B) ‚Üí Homomorphism‚Çí (obj A) (obj B)
toH‚Çí (mk‚§á F‚Çí F‚Çò) = record { F‚Çí = F‚Çí }

toH : (F : A ‚§á B) ‚Üí Homomorphism (mor A) (mor B) ‚¶É H‚Çí = toH‚Çí F ‚¶Ñ
toH (mk‚§á F‚Çí F‚Çò) = record { F‚Çò = F‚Çò }

it-‚§á : ‚àÄ
  {obj‚ÇÅ : Set o} {_‚á®‚ÇÅ_ : obj‚ÇÅ ‚Üí obj‚ÇÅ ‚Üí Set ‚Ñì}
  {obj‚ÇÇ : Set o} {_‚á®‚ÇÇ_ : obj‚ÇÇ ‚Üí obj‚ÇÇ ‚Üí Set ‚Ñì}
  ‚¶É H‚Çí : Homomorphism‚Çí obj‚ÇÅ obj‚ÇÇ ‚¶Ñ ‚¶É H : Homomorphism _‚á®‚ÇÅ_ _‚á®‚ÇÇ_ ‚¶Ñ ‚Üí
  cat _‚á®‚ÇÅ_ ‚§á cat _‚á®‚ÇÇ_
it-‚§á ‚¶É H‚Çí = H‚Çí ‚¶Ñ ‚¶É H = H ‚¶Ñ = mk‚§á (Homomorphism‚Çí.F‚Çí H‚Çí) (Homomorphism.F‚Çò H)


-- Experiment: functor classes

open import Felix.Homomorphism

module _ {ùíú‚ÇÅ ùíú‚ÇÇ : CAT} (F : ùíú‚ÇÅ ‚§á ùíú‚ÇÇ)
    (let open CAT ùíú‚ÇÅ renaming (obj to obj‚ÇÅ; mor to _‚á®‚ÇÅ_)
         open CAT ùíú‚ÇÇ renaming (obj to obj‚ÇÇ; mor to _‚á®‚ÇÇ_))
    ‚¶É _ : Category _‚á®‚ÇÅ_ ‚¶Ñ ‚¶É _ : Category _‚á®‚ÇÇ_ ‚¶Ñ
    { q‚ÇÅ } ‚¶É _ : Equivalent q‚ÇÅ _‚á®‚ÇÅ_ ‚¶Ñ
    { q‚ÇÇ } ‚¶É _ : Equivalent q‚ÇÇ _‚á®‚ÇÇ_ ‚¶Ñ where
  private
    instance _ = toH‚Çí F ; _ = toH F



  record Functor : Set (o ‚äî ‚Ñì ‚äî q‚ÇÅ ‚äî q‚ÇÇ) where
    field
      catH : CategoryH _‚á®‚ÇÅ_ _‚á®‚ÇÇ_

  module _  ‚¶É _ : Products obj‚ÇÅ ‚¶Ñ ‚¶É _ : Cartesian _‚á®‚ÇÅ_ ‚¶Ñ
            ‚¶É _ : Products obj‚ÇÇ ‚¶Ñ ‚¶É _ : Cartesian _‚á®‚ÇÇ_ ‚¶Ñ
            ‚¶É _ : ProductsH obj‚ÇÅ _‚á®‚ÇÇ_ ‚¶Ñ where

    record CartesianFunctor : Set (o ‚äî ‚Ñì ‚äî q‚ÇÅ ‚äî q‚ÇÇ) where
      field
        -- Should the ProductsH go here instead?
        cartH : CartesianH _‚á®‚ÇÅ_ _‚á®‚ÇÇ_

  -- Next: (cartesian) functors compose


  -- module functor-instances where instance

  --   category : Category Functor
  --   category = ?
